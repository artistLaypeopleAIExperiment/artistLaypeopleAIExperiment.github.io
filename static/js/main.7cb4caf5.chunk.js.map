{"version":3,"sources":["PreviewPane.js","Sliders/components.js","Sliders/BarChart.js","Sliders/RangeSlider.js","Sliders/Sliders.js","SliderPane.js","QueryFilter.js","FilterPane.js","InfoFields.js","InfoPane.js","ViewPane.js","MappingsPane.js","Export.js","Projection.js","Layout.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["PreviewPane","Component","constructor","props","super","this","state","dimensions","imgURL","previewImage","timeoutId","componentDidMount","setPreviewPaneCanvas","side_canvas","componentDidUpdate","prevProps","hover_index","setState","clearTimeout","setTimeout","render","previewPane_image_size","_jsxs","children","style","position","width","height","textAlign","_jsx","display","verticalAlign","setPreviewImage","ref","React","memo","thumbHeight","MuiRail","withStyles","theme","rail","backgroundColor","palette","grey","pointerEvents","railHotspot","top","cursor","_ref","classes","getRailProps","Fragment","_objectSpread","className","MuiHandle","root","secondary","main","marginLeft","marginTop","border","borderRadius","whiteSpace","zIndex","_ref2","domain","min","max","handle","id","value","percent","getHandleProps","role","left","concat","MuiTrack","track","trackHotspot","_ref3","source","target","getTrackProps","MuiTickComponent","_ref4","tick","count","format","Typography","label","variant","defaultProps","d","BarChart","isHovering","barSelected","onLeave","bind","calculateHistogram","normalize","data","i","settings","currentProjection","push","metadata","sliderID","buckets","bucketsFinder","stepSize","targetBucket","Math","abs","length","bucketCount","parseFloat","toFixed","bucketList","Object","values","ratio","apply","round","barDataValues","hoverEffect","chartElement","barID","index","arr","Float32Array","fill","prevArr","barData","forEach","element","calculateProjection","color","selected","defaults","animation","markerData","Array","barDataSoll","histogram","barDataIst","barDataCalc","labels","map","val","datasets","type","barThickness","normalized","order","hoverBackgroundColor","options","responsive","interaction","mode","intersect","events","onClick","onHover","event","bgColor","native","plugins","legend","tooltip","enabled","scales","x","stacked","yAxes","beginAtZero","Bar","onMouseLeave","RangeSlider","arguments","range","update","inputValues","typeNumber","step","isToggleOn","handleClick","e","prevState","stopPropagation","changeSlider","onChangeSlider","Grid","container","item","xs","Slider","rootStyle","onUpdate","onChange","Rail","Handles","handles","Tracks","right","tracks","alignItems","justifyContent","marginRight","TextField","fullWidth","size","margin","inputProps","padding","evt","newState","Tooltip","title","info","Sliders","slidersAr","sliders","refSliders","filterData","filtered","createRef","filterVals","datafilter","componentName","filteredArr","list","idx","reduce","curr","SliderList","slider","SliderPane","sliderReset","console","log","filterImageAr","CustomResultProcessing","SimpleResultProcessing","filter","row","fieldOrLabel","operator","field","tryToGetFieldCategory","toLowerCase","indexOf","Filterbox","exportMetadata","filteredMetadata","obj","filterDataToExportCSV","document","getElementsByClassName","click","parseOK","query2","applyFilter","resetFilter","search","newData","process","query","customRenderCompletionItem","self","pick","fontWeight","fontSize","onParseOk","expressions","onParseError","ReactFilterBox","editorConfig","lineWrapping","ButtonGroup","Button","FilterPane","spacing","allFilter","InfoFields","infos","linkStyle","InfoList","uuid","substring","href","rel","wrap","InfoPane","ViewPane","handleChange","checked","handleChangeGrey","filterGrey","_clusters$clusterList","clusters","handleChangeCluster","defaultValue","option","Box","scaleMin","handleChangeScale","scaleMax","handleChangeZoom","MappingsPane","getFilterDataset","checkedState_dataset","getFilterTask","checkedState_task","handleSelectAlgorithm","handleSelectDataset","handleChangeFilterDataset","Artist","Laypeople","options_dataset","colorClass","Copying","Creative","options_task","v","selectAlgorithm","selectDataset","newCheckedState","selectFilterData","handleChangeFilterTask","algorithm_options","algorithm_choice","dataset_options","selectedDataset","datasetInfo","name","Export","makePNG","async","canvasToImage","getElementById","_Fragment","marginBottom","CSVLink","filename","Projection","handleResize","camera","aspect","updateProjectionMatrix","renderer","setSize","current_scale","getScaleFromZ","z","d3_x","d3_y","y","resize_transform","d3","translate","scale","view","mount","d3_zoom","transform","updateProjection","ar","filterAr","ranges","ar_sliced","sprite_number","start","sprite_size","end","slice","c","points","scene","geometry","attributes","filteredActive","THREE","needsUpdate","updatePass2Shader","num","material","uniforms","greyTransparency","imageTransparency","updateClusterColors","clusterSelected","numVertices","clusterColors","total","clustersAr_sliced","cluster_unique","l","clusterId","cluster_int","random","cluster","clusterActive","loadTiles","tilesLoaded","init","pointsAr","addPoints","setupCamera","animate","getZFromScale","changeEmbeddings","sprite_side","tile_locations","n","sprite_dir","datasetIMG","src","img","createElement","new_choice","embedding_chunks","mappings","echunk","array","tween","TWEEN","to","easing","Linear","None","zoomScaler","input","clamp","scaleProj","rvFOV","degToRad","fov","tan","camera_z_position","fov_height","zoomHandler","d3_transform","k","set","new_size","point_group","camera_z_start","embeddings_data","vFOV","min_x","_","max_x","ys","min_y","max_y","max_x_from_center","m","max_y_from_center","far","scaleExtent","on","call","initial_scale","initial_transform","loader","textures","t","load","w","flipY","magFilter","vertices","embedding","vert","positionAr","offsetAr","clusterAr","addAttribute","texture_subsize","sprite_image_size","sprite_actual_size","floor","clusterList","clusterTypeSelected","includes","texture","repeat","vertex_shader","fragment_shader","vertexShader","fragmentShader","transparent","point_cloud","userData","sprite_index","add","addBlankHighlightPoints","hover_container","point","frustumCulled","visible","highlightPoint","digit_index","full_index","offsets","copyVector3sArray","offset","removeHighlights","highlight_container","highlights","remove","checkIntersects","mouse_position","previewPane_ctx","mouse_vector","mouseX","mouseY","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersects","intersectObjects","sorted_intersects","sortIntersectsByDistanceToRay","object","undefined","setHoverIndex","clearRect","fillRect","fillStyle","drawImage","error","handleMouse","domElement","node","clickOnImage","preserveDrawingBuffer","alpha","setClearColor","autoClear","appendChild","requestAnimationFrame","clear","parseInt","greyRenderTypeSelected","componentWillUnmount","removeChild","tileProgress","allTiles","CircularProgress","overflow","Layout","newArr","A","B","currentFilter","currentSearch","refProjection","current","toggleControl","collapsedControl","toggleObject","collapsedObject","ww","wh","previewPane_height","controlPane_height","filterPane_height","showAdvancedFilters","mappingsPaneRef","setDefaults","algorithm_name","window","addEventListener","setRenderer","addToUrl","p","changeDataset","innerWidth","innerHeight","previewPane_mount","offsetHeight","imageSmoothingEnabled","canvas","ctx","getContext","url_prefix","alt","removeEventListener","url","link_URL","open","err","main_style","background","general_style","lineHeight","displayNumb","maxHeight","controlMenu_mount","ProSidebar","collapsed","Menu","iconShape","MenuItem","FaAngleDoubleLeft","FaAngleDoubleRight","SubMenu","defaultOpen","icon","FaDatabase","grem","font_size","FaSlidersH","FaEye","FaSearch","FaCloudDownloadAlt","FaRegImage","FaInfo","FaQuestion","datasetDir","initPath","Data","dataset_dirs","defaultDataset","scaleEmbeddings","embeddings","queryString","location","urlParams","URLSearchParams","get","loadInit","loadConfig","path","loadSettings","loadBarData","loadMetadata","prepareMappings","ID","loadDataset","fetch","file","then","response","json","scaled_embeddings","paramName","navigate","toString","prepareDatasets","directory","choice","newDataset","default","foundInitDataset","floatColorConvertedArr","myColorFunction","rgb","withRouter","useParams","useNavigate","App","BrowserRouter","Routes","Route","exact","WithRouter","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7cb4caf5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass PreviewPane extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimensions: {},\n      imgURL: null,\n      previewImage: false,\n      timeoutId: null\n    };\n    // this.onImgLoad = this.onImgLoad.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.setPreviewPaneCanvas(this.side_canvas);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.hover_index !== prevProps.hover_index) {\n      this.setState({ previewImage: false });\n      clearTimeout(this.state.timeoutId);\n      const timeoutId = setTimeout(() => {\n        this.setState({ previewImage: true });\n      }, 100);\n      this.setState({ timeoutId });\n    }\n  }\n\n  render() {\n    let {\n      previewPane_image_size,\n    } = this.props;\n    // const {width, height} = this.state.dimensions;\n    // var imgWidth = \"auto\";\n    // var imgHeight = \"100%\";\n    // if (width >= height) {\n    //   imgWidth = \"100%\";\n    //   imgHeight = \"auto\"\n    // };\n\n    return (\n      <div>\n      <div style={{position: \"absolute\", width: previewPane_image_size, height: previewPane_image_size, textAlign: \"center\"}}>\n        <span style={{display: \"inline-block\", height: \"100%\", verticalAlign: \"middle\"}}/>\n\n      {this.state.previewImage === true ? this.props.setPreviewImage() : null}\n      \n      </div>\n        <canvas \n          ref={side_canvas => {\n            this.side_canvas = side_canvas\n          }}\n          width={previewPane_image_size}\n          height={previewPane_image_size}\n        />\n      </div>\n    )\n  }\n}\nexport default React.memo(PreviewPane)\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\n// Based on Material Design spec:\n// Styles by https://github.com/RafeSacks\n// https://material.io/design/components/sliders.html#spec\nconst trackHeight = 2;\nconst thumbHeight = 12;\n\n// *******************************************************\n// RAIL COMPONENT\n// *******************************************************\n\nconst muiRailStyle = theme => ({\n  rail: {\n    backgroundColor: theme.palette.grey[400],\n    width: \"100%\",\n    height: trackHeight,\n    position: \"absolute\",\n    pointerEvents: \"none\"\n  },\n  railHotspot: {\n    // backgroundColor: \"green\", // for debugging\n    width: \"100%\",\n    height: thumbHeight * 2, // Invisible hotspot same size as thumb\n    top: thumbHeight * -1,\n    position: \"absolute\",\n    cursor: \"pointer\"\n  }\n});\n\nfunction MuiRailComponent({ classes, getRailProps }) {\n  return (\n    <Fragment>\n      <div className={classes.railHotspot} {...getRailProps()} />\n      <div className={classes.rail} />\n    </Fragment>\n  );\n}\n\nMuiRailComponent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  getRailProps: PropTypes.func.isRequired\n};\n\nexport const MuiRail = withStyles(muiRailStyle)(MuiRailComponent);\n\n// *******************************************************\n// HANDLE COMPONENT\n// *******************************************************\n\nconst muiHandleStyle = theme => ({\n  root: {\n    backgroundColor: theme.palette.secondary.main,\n    marginLeft: thumbHeight * -0.5,\n    marginTop: thumbHeight * -0.5,\n    width: thumbHeight,\n    height: thumbHeight,\n    border: 0,\n    borderRadius: \"50%\", // circle\n    // boxShadow: \"1px 1px 1px 1px rgba(0, 0, 0, 0.2)\",\n    whiteSpace: \"nowrap\", // for child display inline-block to work\n    position: \"absolute\",\n    zIndex: 2,\n    cursor: \"pointer\"\n  }\n});\n\nfunction MuiHandleComponent({\n  domain: [min, max],\n  handle: { id, value, percent },\n  classes,\n  getHandleProps\n}) {\n  return (\n    <div\n      role=\"slider\"\n      aria-valuemin={min}\n      aria-valuemax={max}\n      aria-valuenow={value}\n      className={classes.root}\n      style={{ left: `${percent}%` }}\n      {...getHandleProps(id)}\n    />\n  );\n}\n\nMuiHandleComponent.propTypes = {\n  domain: PropTypes.array.isRequired,\n  handle: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  classes: PropTypes.object.isRequired,\n  getHandleProps: PropTypes.func.isRequired\n};\n\nexport const MuiHandle = withStyles(muiHandleStyle)(MuiHandleComponent);\n\n// *******************************************************\n// TRACK COMPONENT\n// *******************************************************\n\nconst muiTrackStyle = theme => ({\n  track: {\n    backgroundColor: theme.palette.secondary.main,\n    height: trackHeight,\n    position: \"absolute\",\n    zIndex: 1,\n    pointerEvents: \"none\"\n  },\n  trackHotspot: {\n    // backgroundColor: \"grey\", // for debugging\n    height: thumbHeight, // Invisible hotspot same size as thumb\n    top: thumbHeight * -0.5,\n    position: \"absolute\",\n    cursor: \"pointer\"\n  }\n});\n\nfunction MuiTrackComponent({ classes, source, target, getTrackProps }) {\n  const left = `${source.percent}%`;\n  const width = `${target.percent - source.percent}%`;\n\n  return (\n    <Fragment>\n      <div className={classes.track} style={{ left, width }} />\n      <div\n        className={classes.trackHotspot}\n        style={{ left, width }}\n        {...getTrackProps()}\n      />\n    </Fragment>\n  );\n}\n\nMuiTrackComponent.propTypes = {\n  source: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  target: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  classes: PropTypes.object.isRequired,\n  getTrackProps: PropTypes.func.isRequired\n};\n\nexport const MuiTrack = withStyles(muiTrackStyle)(MuiTrackComponent);\n\n// *******************************************************\n// TICK COMPONENT\n// *******************************************************\n\nconst muiTickStyle = theme => ({\n  tick: {\n    position: \"absolute\",\n    marginTop: 14,\n    width: 1,\n    height: 5,\n    backgroundColor: theme.palette.grey[400]\n  },\n  label: {\n    position: \"absolute\",\n    marginTop: 22,\n    textAlign: \"center\"\n  }\n});\n\nexport function MuiTickComponent({ classes, tick, count, format }) {\n  return (\n    <div>\n      <div className={classes.tick} style={{ left: `${tick.percent}%` }} />\n      <Typography\n        className={classes.label}\n        variant=\"caption\"\n        style={{\n          marginLeft: `${-(100 / count) / 2}%`,\n          width: `${100 / count}%`,\n          left: `${tick.percent}%`\n        }}\n      >\n        {format(tick.value)}\n      </Typography>\n    </div>\n  );\n}\n\nMuiTickComponent.propTypes = {\n  tick: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    percent: PropTypes.number.isRequired\n  }).isRequired,\n  classes: PropTypes.object.isRequired,\n  count: PropTypes.number.isRequired,\n  format: PropTypes.func.isRequired\n};\n\nMuiTickComponent.defaultProps = {\n  format: d => d\n};\n\nexport const MuiTick = withStyles(muiTickStyle)(MuiTickComponent);\n","import React from \"react\";\nimport { Bar, defaults } from \"react-chartjs-2\";\n\nclass BarChart extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      // bgColor: this.props.color,\n      isHovering: false,\n      barSelected: null,\n    }\n    this.onLeave = this.onLeave.bind(this)\n    // this.showHideUpdate = this.showHideUpdate.bind(this);\n  }\n  \n\n  calculateHistogram(domain,normalize){\n    // Calculate frequency of data (adapted for float numbers)\n    let data = []\n    for(let i=0;i<this.props.settings[\"total\"];i++){\n      if(this.props.currentProjection[i]===0){\n        data.push(this.props.metadata[i][this.props.sliderID])\n      }\n    }\n    var buckets = {};\n    this.bucketsFinder = {};\n    const bucketCount = 50;\n    var stepSize;\n    if(domain[0] < 0){stepSize = (Math.abs(domain[0]) + Math.abs(domain[1])) / bucketCount}\n    else{stepSize = Math.abs((Math.abs(domain[0]) - Math.abs(domain[1])) / bucketCount)}\n    // Console.log(\"stepSize\", stepSize);\n    for (let i = 0; i < bucketCount; i++) {\n      buckets[i] = 0;\n    }\n    var targetBucket;\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] === domain[1]){targetBucket = bucketCount-1}\n        else {\n          // console.log(data[i])\n          targetBucket = ((data[i] - domain[0]) / stepSize) | 0\n        }\n        buckets[targetBucket] +=1;\n        // if (typeNumber === \"int\")\n        // this.bucketsFinder[parseInt(data[i])] = targetBucket;\n        // else\n        this.bucketsFinder[parseFloat(data[i]).toFixed(1)] = targetBucket;\n      }\n    var bucketList = Object.values(buckets)\n    if (normalize === true){\n      // Normalize data\n      var ratio = Math.max.apply(Math, bucketList) / 50;\n        for (i = 0; i < bucketList.length; i++) {\n          bucketList[i] = Math.round(bucketList[i] / ratio);\n        }\n      }\n    const barDataValues = [];\n    for (let i = 0; i < bucketList.length; i++) {\n      barDataValues.push(bucketList[i] || 0);\n    }\n    // console.log(barDataValues)\n    return barDataValues;\n  }\n\n\n  hoverEffect(chartElement) {\n    this.setState({isHovering: true});\n    if (chartElement[0]) {\n      var barID = chartElement[0].index;\n      var arr = new Float32Array( this.props.settings[\"total\"] ).fill(1);\n      // var arr = !this.props.filterImageAr;\n      var prevArr = this.props.currentProjection;\n      // console.log(this.props.barData[\"selections\"][barID]);?\n      this.props.barData[\"selections\"][barID].forEach(element => {\n        // if (prevArr[element] === 1) {\n          arr[element] = prevArr[element]\n        // }\n        // console.log(this.props.barData[\"selections\"][barID])\n      });\n      this.props.calculateProjection(arr, null, false);\n      this.setState({barSelected: barID});\n    }\n  }\n\n  onLeave() { \n    // this.setState(() => ({isHovering: false}), () => console.log(this.state));\n    this.setState({isHovering: false});\n    this.props.calculateProjection(this.props.currentProjection, null, false)\n  }\n\n  // componentDidUpdate(prevProps) {\n  //   if (this.props.currentProjection !== prevProps.currentProjection) {\n  //     this.barDataIst = this.calculateFrequencyOfData(this.props.domain,this.props.datafilter,false);\n  //   }\n  // }\n\n\n  render() {\n    const { barData, domain, color, selected } = this.props;\n    defaults.animation = false;\n    var markerData = Array(50).fill(0);\n    this.barDataSoll = barData.histogram;\n    this.barDataIst = this.calculateHistogram(domain,false);\n    const barDataCalc = {\n      labels: this.barDataSoll.map((val, i) => i),\n      datasets: [\n        {\n          label: \"barDataIst\",\n          type: 'bar',\n          barThickness: 5,\n          normalized: true,\n          order: 2,\n          backgroundColor: this.state.isHovering ? \"rgb(64, 64, 64)\" : markerData.map((val, i) =>\n            i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\n              ? \"#f50057\"\n              : color\n            ),\n          hoverBackgroundColor: color,\n          // backgroundColor: this.state.bgColor,\n\n          // backgroundColor: this.barDataIst.map((val, i) =>\n          // i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\n          //   ? \"rgb(245, 0, 87)\"\n          //   : this.state.isHovering ? \"rgb(64, 64, 64)\" : color\n          // ),\n          data: this.barDataIst\n          },\n\n          {\n            label: \"barDataSoll\",\n            type: 'bar',\n            barThickness: 5,\n            normalized: true,\n            order: 3,\n            backgroundColor: markerData.map((val, i) =>\n            i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\n              ? \"#542032\"\n              : \"rgb(64, 64, 64)\"\n            ),\n            hoverBackgroundColor: \"rgb(64, 64, 64)\",\n\n          //   backgroundColor: this.barDataIst.map((val, i) =>\n          //   i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\n          //     ? \"rgb(255, 153, 189)\"\n          //     : \"rgb(64, 64, 64)\"\n          // ),\n            // hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n            data: this.barDataSoll\n          }\n      ]\n    };\n\n    // console.log(\"selected\",this.bucketsFinder[parseFloat(selected).toFixed(1)] );\n    const options = {\n      responsive: true,\n      // pointStyle: 'triangle',\n      interaction: {\n        mode: 'index',\n        intersect: false\n        },\n      events: ['mouseleave', \"mousemove\", \"mouseout\", \"click\"], //, 'touchstart', 'touchmove'],\n      hoverBackgroundColor: color,\n      onClick: () => {\n            this.setState({isHovering: !this.state.isHovering});\n            this.props.calculateProjection(this.props.currentProjection, null, false)\n      },\n      onHover: (event, chartElement) => {\n        if (event.type === \"mousemove\" && this.state.isHovering && this.state.barSelected !== chartElement[0].index) {\n          this.setState({bgColor: \"rgb(64, 64, 64)\"});\n          this.hoverEffect(chartElement)\n          if (event.native.target.style.cursor !== 'ew-resize') {\n            event.native.target.style.cursor = 'ew-resize';\n          }\n        } else if (!this.state.isHovering && event.native.target.style.cursor !== 'pointer') {\n            event.native.target.style.cursor = 'pointer';\n          }\n      // if (this.state.isHovering){\n      //   ReactTooltip.hide(this.fooRef)\n      // }\n      },\n      plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          enabled: false\n        }\n      },\n      scales: {\n        x: {\n          display: false,\n          stacked: true,\n          // position: 'bottom'\n        },\n        yAxes: {\n          beginAtZero: true,\n          display: false,\n          // stacked: true,\n          // ticks: {\n          //   min: 100\n          // }\n        }\n      }\n    };\n\n\n    return (\n      <Bar data={barDataCalc} height={62} options={options} onMouseLeave={this.onLeave} />\n      );\n  }\n}\n\nexport default React.memo(BarChart);\n","import React from \"react\";\nimport { Grid, TextField, Tooltip } from \"@material-ui/core\";\nimport { Slider, Rail, Handles, Tracks } from \"react-compound-slider\";\nimport { MuiRail, MuiHandle, MuiTrack } from \"./components\";\nimport BarChart from \"./BarChart\";\n\nclass RangeSlider extends React.Component {\n  state = {\n    domain: this.props.range,\n    update: this.props.range,\n    values: this.props.range,\n    inputValues: this.props.range,\n    typeNumber: this.props.typeNumber,\n    step: this.props.step,\n    color: this.props.color,\n    hover_index: this.props.hover_index,\n    isToggleOn: false,\n  };\n\n  handleClick = (e) => {\n    this.setState((prevState) => ({ isToggleOn: !prevState.isToggleOn }));\n    e.stopPropagation();\n  };\n\n  changeSlider = (values) => {\n    this.props.onChangeSlider(this.props.id, values);\n  };\n\n  render() {\n    const { domain, values, update, inputValues, color, typeNumber } = this.state;\n\n    return (\n      <Grid container>\n        <Grid item xs={12}>\n          <div style={{ height: \"90px\", width: \"270px\", marginTop: \"22px\" }}>\n            <BarChart\n              update={update}\n              domain={domain}\n              color={color}\n              barData={this.props.barData}\n              calculateProjection={this.props.calculateProjection}\n              settings={this.props.settings}\n              currentProjection={this.props.currentProjection}\n              sliderID={this.props.sliderID}\n              metadata={this.props.metadata}\n              selected={this.props.metadata[this.props.hover_index][this.props.sliderID]}\n            />\n\n            <Slider\n              mode={3}\n              step={typeNumber === \"int\" ? 1 : 0.01}\n              domain={domain}\n              color={color}\n              rootStyle={{\n                position: \"relative\",\n                width: \"100%\",\n              }}\n              onUpdate={(update) => {\n                this.setState({ update, inputValues: update });\n              }}\n              onChange={(values) => {\n                this.setState({ values });\n                this.changeSlider(update);\n              }}\n              values={values}\n            >\n              <Rail>\n                {({ getRailProps }) => <MuiRail getRailProps={getRailProps} />}\n              </Rail>\n              <Handles>\n                {({ handles, getHandleProps }) => (\n                  <div className=\"slider-handles\">\n                    {handles.map((handle) => (\n                      <MuiHandle\n                        key={handle.id}\n                        handle={handle}\n                        domain={domain}\n                        getHandleProps={getHandleProps}\n                      />\n                    ))}\n                  </div>\n                )}\n              </Handles>\n              <Tracks left={false} right={false}>\n                {({ tracks, getTrackProps }) => (\n                  <div className=\"slider-tracks\">\n                    {tracks.map(({ id, source, target }) => (\n                      <MuiTrack\n                        key={id}\n                        source={source}\n                        target={target}\n                        getTrackProps={getTrackProps}\n                      />\n                    ))}\n                  </div>\n                )}\n              </Tracks>\n            </Slider>\n            <Grid\n              container\n              alignItems=\"center\"\n              justifyContent=\"space-around\"\n              // style={{ marginTop: \"15px\" }}\n            >\n              <Grid\n                item\n                xs={3}\n                style={{\n                textAlign: \"right\",\n                border: \"solid 1px white\",\n                height:\"20px\",\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                // marginTop: '-12px',\n                }}\n              >\n                <TextField\n                  fullWidth\n                  variant=\"outlined\"\n                  label=\"\"\n                  size=\"small\"\n                  width=\"8px\"\n                  value={inputValues[0]}\n                  margin=\"none\"\n                  inputProps={{\n                    style: {\n                      color:\"white\",\n                      padding: 0,\n                      marginLeft: 2\n                    }\n                  }}\n                  onChange={(evt) => {\n                    const value = evt.target.value;\n                    const newState = [value, inputValues[1]];\n                    this.setState({ inputValues: newState });\n                    if (value && value >= domain[0]) {\n                      this.setState({ values: newState });\n                    }\n                  }}\n                />\n              </Grid>\n              <Grid item xs={4} style={{ textAlign: \"center\",  marginTop: '-6px',}}>\n\n              <Tooltip title={<h3>{this.props.info}</h3>}>\n              <h3 style={{cursor: \"help\"}}>{this.props.title}</h3>\n              </Tooltip>\n              </Grid>\n              <Grid\n                item\n                xs={3}\n                style={{\n                textAlign: \"right\",\n                border: \"solid 1px white\",\n                height:\"20px\",\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                // marginTop: '-12px',\n                }}\n              >\n                <TextField\n                  fullWidth\n                  variant=\"outlined\"\n                  label=\"\"\n                  size=\"small\"\n                  value={inputValues[1]}\n                  margin=\"none\"\n                  inputProps={{\n                    style: {\n                      color:\"white\",\n                      padding: 0,\n                      marginLeft: 2\n                    }\n                  }}\n                  // style={{ paddingTop: \"2px\", paddingBottom: \"8px\",color: \"white\" }}\n                  onChange={(evt) => {\n                    const value = evt.target.value;\n                    const newState = [inputValues[0], value];\n                    this.setState({ inputValues: newState });\n                    if (value && value <= domain[1] && value >= values[0]) {\n                      this.setState({ values: newState });\n                    }\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default React.memo(RangeSlider);\n","import React, { Component } from 'react';\nimport { Grid } from \"@material-ui/core\";\nimport RangeSlider from \"./RangeSlider\";\n//import uuid from 'react-uuid';\n\nclass Sliders extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeSlider = this.changeSlider.bind(this);\n    // create references for each slider\n    this.slidersAr = []\n    for (let element in this.props.settings.sliders) {\n      this.slidersAr.push( this.props.settings.sliders[element].id );\n    }\n    this.refSliders = {}\n    this.filterData = {}\n    this.filtered = {}\n\n    for(let i=0;i<this.slidersAr.length;i+=1){\n      this.refSliders[this.slidersAr[i]] = React.createRef();\n      // Initial values non filter\n      let filterVals = []\n      for (let element in this.props.metadata) {\n        filterVals.push( this.props.metadata[element][this.slidersAr[i]] );\n      }\n      this.filterData[this.slidersAr[i]] = filterVals\n    }\n    this.state = {\n      datafilter: this.filterData\n    }\n\n  }\n\n  changeSlider(componentName, values) {\n    // console.log(componentName, values);\n    let {\n      metadata,\n    } = this.props\n    this.filtered[componentName] = new Float32Array( this.props.settings[\"total\"]).fill(0)\n    let filteredArr = new Float32Array( this.props.settings[\"total\"])\n\n    for(let element in metadata){\n      if(values[0] > metadata[element][componentName] ||\n          values[1] < metadata[element][componentName]\n          ){\n            this.filtered[componentName][element] = 1\n      }\n    }\n    let list = Object.values(this.filtered)\n    let arr = filteredArr.map((x, idx) => list.reduce((max, curr) => max + curr[idx], 0));\n    this.props.calculateProjection(arr, \"filter\", true)\n  }\n\n\n  render() {\n    let {\n      hover_index,\n      settings,\n      barData,\n    } = this.props;\n\n    const slidersSettings = settings['sliders'];\n    const SliderList = slidersSettings.map((slider) =>\n    <Grid item>\n      <RangeSlider\n        ref={this.refSliders[slider['id']]}\n        datafilter={this.state.datafilter[slider['id']]}\n        title={slider['title']}\n        id={slider['id']}\n        info={slider['info']}\n        typeNumber={slider['typeNumber']}\n        color={slider['color']}\n        onChangeSlider={this.changeSlider}\n        hover_index={hover_index}\n        barData={barData[slider['id']]}\n        calculateProjection={this.props.calculateProjection}\n        currentProjection={this.props.currentProjection}\n        settings={settings}\n        sliderID={slider['id']}\n        metadata={this.props.metadata}\n        range={[slider['min'],slider['max']]}\n        />\n      </Grid>\n    )\n\n    return (\n      <Grid container style={{ marginLeft: \"6px\"}}>\n        <Grid item >\n        {SliderList}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default Sliders\n","import React, { Component } from 'react'\nimport Sliders from \"./Sliders/Sliders\";\n\nclass SliderPane extends Component {\n  constructor(props) {\n    super(props);\n    this.sliderReset = this.sliderReset.bind(this);\n  }\n\n  sliderReset() {\n    console.log(\"reset range sliders\");\n  }\n\n  render() {\n    let {\n      metadata,\n      hover_index,\n    } = this.props;\n\n    return (\n      <Sliders\n        metadata={metadata}\n        settings={this.props.settings}\n        hover_index={hover_index}\n        barData={this.props.barData}\n        filterImageAr={this.props.filterImageAr}\n        calculateProjection={this.props.calculateProjection}\n        currentProjection={this.props.currentProjection}\n      />\n    )\n  }\n}\n\nexport default React.memo(SliderPane)","import React, { Component } from 'react'\nimport  _ from \"lodash\";\nimport { Button, ButtonGroup } from \"@material-ui/core\";\nimport ReactFilterBox, {SimpleResultProcessing, GridDataAutoCompleteHandler} from \"react-filter-box\";\nimport \"./filter-box.css\";\n\n//Extend this class to add your custom operator\n// class CustomAutoComplete extends GridDataAutoCompleteHandler {\n//     // Override this method to add new your operator\n//     needOperators(parsedCategory) {\n//         var result = super.needOperators(parsedCategory);\n//         return result.concat([\"startsWith\"]);\n//     }\n// }\n\nclass CustomResultProcessing extends SimpleResultProcessing {\n    // Override this method to add your handler for startsWith operator\n    filter(row, fieldOrLabel, operator, value){\n        var field = this.tryToGetFieldCategory(fieldOrLabel);\n        switch(operator){\n            case \"==\": return row[field] === value;\n            case \"!=\": return row[field] !== value;\n            case \"contains\": return row[field] && row[field].toLowerCase().indexOf(value.toLowerCase()) >=0;\n            case \"!contains\": return row[field] && row[field].toLowerCase().indexOf(value.toLowerCase()) <0;\n            default: return false;\n        }\n    }\n    }\n\nclass Filterbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            parseOK: true,\n            query2: {}\n        };\n        this.applyFilter = this.applyFilter.bind(this);\n        this.resetFilter = this.resetFilter.bind(this);\n        this.options = this.props.settings.search;\n        // this.customAutoComplete = new CustomAutoComplete(this.props.metadata,this.options);\n        // this.editorConfig = {\n        //     direction: \"rtl\"\n        // };\n    }\n\n    applyFilter() {\n        var newData = new CustomResultProcessing(this.options).process(this.props.metadata, this.state.query2);\n        var arr = new Float32Array(this.props.settings[\"total\"]).fill(1);\n        newData.forEach(element => {\n            arr[element[\"index\"]] = 0;\n        });     \n        this.props.calculateProjection(arr, \"search\", true);\n    }\n\n    resetFilter() {\n        this.setState({ query: null, query2: '' });\n        var arr = new Float32Array(this.props.settings[\"total\"]).fill(0);\n        this.props.calculateProjection(arr, \"search\", true);\n    }\n\n    //customer your rendering item in auto complete\n    customRenderCompletionItem(self, data, pick) {\n        var className = `hint-value cm-${data.type}`\n        return <div className={className} >\n                    <span style={{ fontWeight: \"bold\" }}>{data.value}</span>\n                    <span style={{color:\"gray\", fontSize:10}}> [{data.type}] </span>\n                </div>\n    }\n\n    onParseOk(expressions) {\n        this.setState({ parseOK: false });\n        this.setState({ query2: expressions });\n        // this.applyFilter(expressions);\n    }\n\n    onParseError(expressions) {\n        this.setState({ parseOK: true });\n    }\n    \n    exportMetadata = () => {\n        var filteredMetadata = [];\n        for (let i = 0; i < this.props.metadata.length; i++) {\n          if (this.props.currentProjection[i] === 0) {\n            var obj = this.props.metadata[i];\n            filteredMetadata.push(obj);\n          }\n        }\n        this.setState(\n          { filterDataToExportCSV: filteredMetadata },\n          () => {\n            document.getElementsByClassName('hidden')[0].click();\n          }\n        );\n      };\n      \n\n    render() {\n        return (\n        <div className=\"main-container\">\n            <ReactFilterBox\n                // autoCompleteHandler = {this.customAutoComplete}\n                customRenderCompletionItem = {this.customRenderCompletionItem.bind(this) }\n                query={this.state.query}\n                data={this.props.metadata}\n                options={this.options}\n                onParseOk={this.onParseOk.bind(this) }\n                onParseError={this.onParseError.bind(this) }\n                editorConfig={{ lineWrapping: true }}\n            />\n\n            <ButtonGroup variant=\"contained\">\n            <Button onClick={this.applyFilter}>apply</Button>\n            <Button onClick={this.resetFilter}>reset</Button>\n            </ButtonGroup>\n\n        </div>\n        )\n    }\n}\n\nexport default Filterbox","import React, { Component } from 'react'\nimport { Grid } from \"@material-ui/core\";\n//import _ from \"lodash\";\nimport Filterbox from \"./QueryFilter\";\n\nclass FilterPane extends Component {\n\n  render() {\n    let {\n      metadata,\n      settings,\n    } = this.props\n\n    return (\n      <Grid container spacing={2}>\n        <Filterbox \n          calculateProjection={this.props.calculateProjection}\n          settings={settings}\n          metadata={metadata}\n          currentProjection={this.props.currentProjection}\n          allFilter={this.props.allFilter}\n        />\n      </Grid>\n    )\n  }\n}\n\nexport default React.memo(FilterPane)","import React, { Component, Fragment } from 'react'\nimport { Grid } from \"@material-ui/core\";\nimport uuid from 'react-uuid';\n\nclass InfoFields extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        let {\n            metadata,\n            hover_index,\n            infos,\n        } = this.props;\n\n        const linkStyle = {\n            color: 'CornflowerBlue'\n        };\n        \n\n        const InfoList = infos.map((info) => \n            <Fragment>\n                <Grid key={uuid()} item xs={4}>\n                    {info}:\n                </Grid>\n                <Grid key={uuid()} item xs={8}>   \n                    {( typeof  metadata[hover_index][info] === 'string' && metadata[hover_index][info].length>4 && metadata[hover_index][info].substring(0, 4)==='http')  ? <a href={metadata[hover_index][info]} target=\"_blank\" rel=\"noreferrer\" style={linkStyle}>{metadata[hover_index][info].substring(8,30)}...</a>: metadata[hover_index][info]}\n                </Grid>\n            </Fragment>\n        )\n\n        return (\n            <Grid key={uuid()} container justifyContent=\"space-between\" spacing={1} wrap=\"wrap\">    \n                {/* <Grid key={uuid()} item xs={12}>   \n                    <b>{metadata[hover_index].Title}</b>\n                </Grid> */}\n                {InfoList}\n\n            </Grid>\n        );\n    }\n}\n\nexport default InfoFields","import React, { Component } from 'react'\nimport InfoFields from \"./InfoFields\";\n\nclass InfoPane extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      dimensions: {},\n    };\n  }\n\n  render() {\n    let {\n      hover_index,\n      infos,\n      metadata,\n    } = this.props;\n\n    return (\n      <InfoFields\n      metadata={metadata}\n      hover_index={hover_index}\n      infos={infos}\n      />\n    )\n\n  }\n}\n\nexport default React.memo(InfoPane)\n","import React, { Component } from 'react'\nimport { Grid, Slider, Box } from \"@material-ui/core\";\n\nclass ViewPane extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      dimensions: {},\n      checked: this.props.filterGrey\n    }\n  }\n\n  handleChange = () => {\n    this.setState(prevState => ({\n      checked: !prevState.checked\n    }));\n    this.props.handleChangeGrey(this.state.checked ? 1 : 0);\n  }\n\n  render() {\n    let {\n      clusters\n    } = this.props\n\n    return (\n      <Grid container spacing={1}>\n        \n          \n          <Grid item xs={4}>\n            clusters:\n          </Grid>\n          <Grid item xs={8}>\n            <select \n              onChange={this.props.handleChangeCluster } \n              defaultValue={clusters['clusterList']?.[0] || \"disabled\"} // Set the default to the first item in clusterList\n            >\n              <option key=\"0\" value=\"disabled\">-</option>\n              {clusters['clusterList'].map((option, index) => (\n                <option key={option} value={option}>\n                  {option.toLowerCase()}\n                </option>\n              ))}\n            </select>\n          </Grid>\n          <Grid item xs={4}>\n            size (out):\n          </Grid>\n          <Grid item xs={8}>\n          <Box height={10}>\n          <Slider\n            size=\"small\"\n            defaultValue={this.props.scaleMin}\n            min={3}\n            max={60}\n            onChange={this.props.handleChangeScale}\n          />\n          </Box>\n          </Grid>\n          <Grid item xs={4}>\n          size (in):\n          </Grid>\n          <Grid item xs={8}>\n          <Box height={10}>\n          <Slider\n            size=\"small\"\n            defaultValue={this.props.scaleMax}\n            min={3}\n            max={120}\n            onChange={this.props.handleChangeZoom}\n          />\n          </Box>\n          </Grid>\n\n          <Grid item xs={11}>\n          show filtered-out items (slower):\n          </Grid>\n          <Grid item xs={1}>\n            <input type=\"checkbox\" \n            checked={this.state.checked} \n            onChange={this.handleChange}\n            />\n          </Grid>\n\n      </Grid>\n    )\n  }\n}\n\nexport default React.memo(ViewPane)\n","import React, { Component } from 'react'\nimport { Grid } from \"@material-ui/core\";\n\nimport \"./App.css\";\n\nclass MappingsPane extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSelectAlgorithm = this.handleSelectAlgorithm.bind(this);\n    this.handleSelectDataset = this.handleSelectDataset.bind(this);\n    this.handleChangeFilterDataset = this.handleChangeFilterDataset.bind(this);\n\n    this.state = {\n      checkedState_dataset: {\n        Artist: true,\n        Laypeople: true,\n        \"GPT-4o\": true,\n        \"Input image\": true,\n      },\n      options_dataset: [\n        { label: \"Artist\", colorClass: \"color-artist\" },\n        { label: \"Laypeople\", colorClass: \"color-laypeople\" },\n        { label: \"GPT-4o\", colorClass: \"color-gpt4o\" },\n        { label: \"Input image\", colorClass: \"color-reference\" },\n      ],\n      checkedState_task: {\n        Copying: true,\n        Creative: true,\n      },\n      options_task: [\n        { label: \"Copying\" },\n        { label: \"Creative\" },\n      ],\n    };\n  }\n\n  getFilterDataset = () => {\n    return this.state.checkedState_dataset;\n  };\n\n  getFilterTask = () => {\n    return this.state.checkedState_task;\n  };\n\n  handleSelectAlgorithm(e) {\n    let v = e.target.value;\n    this.props.selectAlgorithm(v);\n  }\n\n  handleSelectDataset(e) {\n    let v = e.target.value;\n    this.props.selectDataset(v);\n  }\n\n  handleChangeFilterDataset(label) {\n    this.setState((prevState) => {\n      const newCheckedState = {\n        ...prevState.checkedState_dataset,\n        [label]: !prevState.checkedState_dataset[label],\n      };\n      console.log(\"Updated State:\", newCheckedState);\n      this.props.selectFilterData(newCheckedState,\"dataset\");\n      return { checkedState_dataset: newCheckedState };\n    });\n    \n  }\n  handleChangeFilterTask(label) {\n    this.setState((prevState) => {\n      const newCheckedState = {\n        ...prevState.checkedState_task,\n        [label]: !prevState.checkedState_task[label],\n      };\n      console.log(\"Updated State:\", newCheckedState);\n      this.props.selectFilterData(newCheckedState,\"task\");\n      return { checkedState_task: newCheckedState };\n    });\n  }\n\n  render() {\n    const { algorithm_options, algorithm_choice, dataset_options, selectedDataset, datasetInfo } = this.props;\n    const { options_dataset, checkedState_dataset,options_task, checkedState_task } = this.state;\n\n    return (\n      <Grid container spacing={1}>\n        <Grid item xs={4}>\n          Dataset:\n        </Grid>\n        <Grid item xs={8}>\n          {options_dataset.map((option) => (\n            <label key={option.label} className=\"check-input-item\">\n              <input\n                type=\"checkbox\"\n                name={option.label}\n                value={option.label}\n                checked={checkedState_dataset[option.label]}\n                onChange={() => this.handleChangeFilterDataset(option.label)}\n              />\n              <span className={`color-square ${option.colorClass}`}></span>\n              {option.label}\n              <br/>\n            </label>\n            \n          ))}\n        </Grid>\n        <Grid item xs={4}>\n          Task:\n        </Grid>\n        <Grid item xs={8}>\n          {options_task.map((option) => (\n            <label key={option.label} className=\"check-input-item\">\n              <input\n                type=\"checkbox\"\n                name={option.label}\n                value={option.label}\n                checked={checkedState_task[option.label]}\n                onChange={() => this.handleChangeFilterTask(option.label)}\n              />\n              {option.label}\n              <br/>\n            </label>\n            \n          ))}\n        </Grid>\n        <Grid item xs={4}>\n          Embeddings:\n        </Grid>\n        <Grid item xs={8}>\n          <select\n            className=\"full-width\"\n            onChange={this.handleSelectDataset}\n            value={selectedDataset}\n          >\n            {dataset_options.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </Grid>\n        <Grid item xs={4}>\n          Projection:\n        </Grid>\n        <Grid item xs={8}>\n          <select\n            className=\"full-width\"\n            onChange={this.handleSelectAlgorithm}\n            value={algorithm_options[algorithm_choice]}\n          >\n            {algorithm_options.map((option, index) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </Grid>\n        <Grid item xs={12}>\n          <p className=\"info\">{datasetInfo}</p>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default React.memo(MappingsPane);","\nimport React, { Component } from 'react'\nimport { Button } from \"@material-ui/core\";\nimport { CSVLink } from \"react-csv\";\nimport canvasToImage from 'canvas-to-image';\n\n\nclass Export extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        filterDataToExportCSV:[],\n    }\n    }\n\n    makePNG = async () => {\n        console.log('download projection area as png')\n        canvasToImage(document.getElementById(\"threeCanvas\"));\n      }\n\n  \n\nrender() {\n    let {\n        metadata,\n        currentProjection\n      } = this.props;\n\n    return (\n        <><div style={{ marginBottom: \"12px\" }}>\n        <CSVLink \n            data={this.state.filterDataToExportCSV} \n            filename={\"CSN_filtered_metadata.csv\"} \n            target=\"_blank\"\n            onClick={() => {\n            let filteredMetadata = [];\n            for (let i=0;i<metadata.length;i++) {\n                if(currentProjection[i]===0){\n                var obj = metadata[i];\n                filteredMetadata.push(obj)\n                }\n            }\n            this.setState({filterDataToExportCSV: filteredMetadata});\n            }}                \n            >\n            <Button variant=\"contained\" fullWidth >Download metadata CSV</Button>\n            </CSVLink>\n            </div><div>\n                <Button variant=\"contained\" fullWidth onClick={this.makePNG}>Download projection PNG</Button>\n            </div></>\n\n    )\n\n\n}\n  \n    // // Release memory of export filter metadata\n    // if(this.state.filterDataToExportCSV.length>0) this.setState({filterDataToExportCSV: []});\n\n\n}\n\nexport default React.memo(Export)\n\n","import React, { Component } from 'react'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nimport { CircularProgress } from \"@material-ui/core\";\n\nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.loadTiles()\n    this.state = {\n      tilesLoaded: 0,\n      view: null\n    }\n    this.init = this.init.bind(this)\n    this.pointsAr = []\n    this.addPoints = this.addPoints.bind(this)\n    this.handleResize = this.handleResize.bind(this)\n    this.setupCamera = this.setupCamera.bind(this)\n    this.animate = this.animate.bind(this)\n    this.getScaleFromZ = this.getScaleFromZ.bind(this)\n    this.getZFromScale = this.getZFromScale.bind(this)\n    this.changeEmbeddings = this.changeEmbeddings.bind(this)\n  }\n\n  loadTiles(){ \n    this.sprite_size = this.props.settings.sprite_side * this.props.settings.sprite_side\n    this.tile_locations = [...Array(this.props.settings.sprite_number)].map(\n      (n, i) => `${process.env.PUBLIC_URL}/datasets/${this.props.settings.sprite_dir}/tile_${i}.png`\n    )  \n    this.datasetIMG = this.tile_locations.map(src => {\n      let img = document.createElement('img')\n      img.src = src\n      return img\n    })\n  }\n\n  //changeEmbeddings(prev_choice, new_choice) {\n  changeEmbeddings(new_choice) {\n    let ranges = []\n    for (let i = 0; i < this.props.settings.sprite_number; i++) {\n      let start = i * this.sprite_size\n      let end = (i + 1) * this.sprite_size\n      if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size\n      ranges.push([start, end])\n    }\n\n    let embedding_chunks = ranges.map(range =>\n      this.props.mappings[new_choice].slice(\n        range[0],\n        range[1]\n      )\n    )\n\n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\n      let echunk = embedding_chunks[c]\n\n      let points = this.scene.children[0].children[c]\n      let numVertices = echunk.length\n\n      let position = points.geometry.attributes.position.array\n      let target = new Float32Array(numVertices * 3)\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let x = echunk[i][0]\n        let y = echunk[i][1]\n        let z = 0\n        target[index] = x\n        target[index + 1] = y\n        target[index + 2] = z\n      }\n\n      let tween = new TWEEN.Tween(position)\n        .to(target, 1000)\n        .easing(TWEEN.Easing.Linear.None)\n      tween.onUpdate(function() {\n        points.geometry.attributes.position = new THREE.BufferAttribute(\n          position,\n          3\n        )\n        points.geometry.attributes.position.needsUpdate = true // required after the first render\n      })\n      tween.start();\n    }\n  }\n\n  zoomScaler(input) {\n    let scaleProj = d3\n    .scaleLinear()\n    .domain([20,0])\n    .range([this.props.scaleMin, this.props.scaleMax])\n    .clamp(true);\n    return scaleProj(input);\n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov);\n    let scale_height = this.props.height / scale;\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2));\n    return camera_z_position;\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov);\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position;\n    let fov_height = half_fov_height * 2;\n    let scale = this.props.height / fov_height;\n    return scale;\n  }\n\n  handleResize = (width, height) => {\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(width, height);\n    let current_scale = this.getScaleFromZ(this.camera.position.z);\n    let d3_x = -(this.camera.position.x * current_scale) + this.props.width / 2;\n    let d3_y = this.camera.position.y * current_scale + this.props.height / 2;\n    var resize_transform = d3.zoomIdentity\n      .translate(d3_x, d3_y)\n      .scale(current_scale);\n    let view = d3.select(this.mount);\n    this.d3_zoom.transform(view, resize_transform);\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform;\n    let scale = d3_transform.k;\n    let x = -(d3_transform.x - this.props.width / 2) / scale;\n    let y = (d3_transform.y - this.props.height / 2) / scale;\n    let z = this.getZFromScale(scale);\n    this.camera.position.set(x, y, z);\n    // point size scales at end of zoom\n    let new_size = this.zoomScaler(z);\n    let point_group = this.scene.children[0].children;\n    for (let c = 0; c < point_group.length; c++) {\n      point_group[c].material.uniforms.size.value = new_size;\n    }\n  }\n\n  setupCamera() {\n    let { width, height, embeddings_data } = this.props\n\n    let vFOV = this.camera.fov\n    let rvFOV = THREE.Math.degToRad(vFOV)\n\n    let xs = embeddings_data.map(e => e[0])\n    let min_x = _.min(xs)\n    let max_x = _.max(xs)\n    let ys = embeddings_data.map(e => e[1])\n    let min_y = _.min(ys)\n    let max_y = _.max(ys)\n\n    let max_x_from_center = _.max([min_x, max_x].map(m => Math.abs(m)))\n    let max_y_from_center = _.max([min_y, max_y].map(m => Math.abs(m)))\n\n    let max_center = Math.max(max_x_from_center, max_y_from_center)\n\n    let camera_z_start\n    // if (data_aspect > aspect) {\n    //   // console.log(\"width is limiter\");\n    //   // camera_z_start = max_x_from_center / Math.tan(rvFOV / 2) / aspect\n    // } else {\n    //   // console.log(\"height is limiter\");\n    //   // camera_z_start = max_y_from_center / Math.tan(rvFOV / 2)\n    // }\n\n    camera_z_start = max_center / Math.tan(rvFOV / 2)\n\n    let far = camera_z_start * 1.25\n    this.camera.far = far\n    this.camera.position.z = camera_z_start * 1.1\n\n    // set up zoom\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n    this.setState({ view: view })\n  }\n\n  addPoints() {\n    let { embeddings_data,metadata } = this.props;\n\n    // split embeddings and labels into chunks to match sprites\n    let ranges = [];\n    for (let i = 0; i < this.props.settings.sprite_number; i++) {\n      let start = i * this.sprite_size;\n      let end = (i + 1) * this.sprite_size;\n      if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size;\n      ranges.push([start, end]);\n    }\n    let embedding_chunks = ranges.map(range =>\n      embeddings_data.slice(range[0], range[1])\n    );\n\n    // load the textures\n    let loader = new THREE.TextureLoader();\n    this.textures = this.tile_locations.map(l => {\n      let t = loader.load(l,\n        function ( w ) {\n          this.setState({ tilesLoaded: this.state.tilesLoaded+1 });\n        }.bind(this)\n      )\n      t.flipY = false\n      t.magFilter = THREE.NearestFilter\n      return t\n    })  \n    let geometry;\n    let point_group = new THREE.Group();\n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\n      let echunk = embedding_chunks[c];\n      //let lchunk = label_chunks[c]\n\n      let vertices = [];\n      for (let v = 0; v < echunk.length; v++) {\n        let embedding = echunk[v];\n        let vert = new THREE.Vector3(embedding[0], embedding[1], 0);\n        vertices[v] = vert;\n      }\n\n      geometry = new THREE.BufferGeometry();\n\n      let numVertices = vertices.length;\n      // console.log(\"numVertices -->\",numVertices)\n      let positionAr = new Float32Array(numVertices * 3);\n      let offsetAr = new Float32Array(numVertices * 2);\n      let clusterAr = new Float32Array(numVertices * 3);\n      let filterAr = new Float32Array(numVertices );\n      //let clustersActive = new Float32Array(numVertices );\n      geometry.addAttribute('position', new THREE.BufferAttribute(positionAr, 3));\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsetAr, 2));\n      geometry.addAttribute('filter', new THREE.BufferAttribute(filterAr, 1));\n      geometry.addAttribute('cluster', new THREE.BufferAttribute(clusterAr, 3));\n      //geometry.addAttribute('clusterActive', new THREE.BufferAttribute(clustersActive, 1));\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let x = echunk[i][0];\n        let y = echunk[i][1];\n        let z = 0;\n        positionAr[index] = x;\n        positionAr[index + 1] = y;\n        positionAr[index + 2] = z;\n      }\n      // geometry.attributes.position.copyVector3sArray(vertices)\n\n      let texture_subsize = 1 / this.props.settings.sprite_side;\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 2) {\n        let x = ((i % this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / this.props.settings.sprite_actual_size\n        let y =\n          (Math.floor(i / this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / this.props.settings.sprite_actual_size\n        offsetAr[index] = x;\n        offsetAr[index + 1] = y;\n      }\n      if (this.props.settings.clusters.clusterList) {\n        // Todo: connect cluster the array\n        let clusterSelected = this.props.clusterTypeSelected;\n        let clusterColors = this.props.settings.clusters.clusterColors;\n        // console.log(\"clusterSelected\",clusterSelected)\n        for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 1) {\n          // Images disable when are not visible\n          filterAr[index] = 0.0;// default value to show all images\n\n          // Clusters visualization\n\n          if( clusterSelected !== \"-\" && this.props.settings.clusters.clusterList.includes(clusterSelected) ){ \n              let clusterId = metadata[index][clusterSelected];\n              if(clusterId >= clusterColors.length){\n                clusterAr[index*3] = 1.0;\n                clusterAr[index*3 + 1] = 1.0;\n                clusterAr[index*3 + 2] = 1.0;\n              }else{\n                clusterAr[index*3] = clusterColors[clusterId][0];\n                clusterAr[index*3 + 1] = clusterColors[clusterId][1];\n                clusterAr[index*3 + 2] = clusterColors[clusterId][2];\n              }\n          }\n      }\n    }\n      // uniforms\n      let uniforms = {\n        texture: { value: this.textures[c] },\n        repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n        size: { value: this.props.settings.sprite_image_size },\n        greyTransparency:{ value:0.1},\n        imageTransparency:{ value:1.0},\n        clusterActive:{ value:0.0}\n      };\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 cluster;\n        varying vec3 vCluster;\n        attribute float filteredActive;\n        varying float vFilteredActive;\n        uniform float clusterActive;\n        varying float vClusterActive;\n        uniform float size;\n        uniform float greyTransparency;\n        varying float vGreyTransparency;\n        uniform float imageTransparency;\n        varying float vImageTransparency;\n\n        void main() {\n          vOffset = offset;\n          vFilteredActive = filteredActive;\n          vCluster = cluster;\n          vClusterActive = clusterActive;\n          vGreyTransparency = greyTransparency;\n          vImageTransparency = imageTransparency;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`;\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vCluster;\n        varying float vClusterActive;\n        varying float vFilteredActive;\n        varying float vGreyTransparency;\n        varying float vImageTransparency;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          // make transparent images\n          if ( tex.a < 0.003 ) discard;\n\n          // Display clusters\n          vec4 replace_color = vec4(vCluster,1.0);\n          vec4 default_border_color = vec4(0.00392156863,0.00392156863,0.00392156863,0.0);\n          vec4 diff = tex - default_border_color;\n          float equality = float(dot(diff,diff) < 0.99 && vClusterActive > 0.9);\n          tex = mix( tex, replace_color, equality);\n           \n          // make transparent images\n          tex = mix( tex,  vec4(0.0,0.0,0.0,0.0), vImageTransparency);\n\n          // Grey images filter our selection \n          vec4 filterout_color = vec4(0.3,0.3,0.3,vGreyTransparency);\n          float filterout_equality = float(vFilteredActive > 0.9);\n          tex = mix( tex, filterout_color, filterout_equality );\n          gl_FragColor = tex; //* vec4(vColor, 1.0);\n        }`;\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n        transparent: true\n      });\n\n      // point cloud\n      let point_cloud = new THREE.Points(geometry, material);\n      point_cloud.userData = { sprite_index: c };\n      this.pointsAr.push(point_cloud);\n      // console.log(\"new points\")\n      point_group.add(point_cloud);\n    }\n    this.scene.add(point_group);\n  }\n\n  addBlankHighlightPoints() {\n    let hover_container = new THREE.Group();\n    this.scene.add(hover_container);\n\n    let vert = new THREE.Vector3(0, 0, 0);\n    let vertices = [vert];\n    let geometry = new THREE.BufferGeometry();\n    let numVertices = vertices.length;\n    var positionAr = new Float32Array(numVertices * 3); // 3 coordinates per point\n    var offsetAr = new Float32Array(numVertices * 2); // 2 coordinates per point\n    geometry.addAttribute('position', new THREE.BufferAttribute(positionAr, 3));\n    geometry.addAttribute('offset', new THREE.BufferAttribute(offsetAr, 2));\n\n    // all the attributes will be filled on hover\n    let texture_subsize = 1 / this.props.settings.sprite_side;\n\n    // uniforms\n    let uniforms = {\n      texture: { value: this.textures[0] },\n      repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n      size: { value: 120.0 }, //56\n    };\n\n    let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`;\n\n    let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          gl_FragColor = tex;\n        }`;\n\n    // material\n    var material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertex_shader,\n      fragmentShader: fragment_shader,\n      transparent: true,\n    });\n\n    let point = new THREE.Points(geometry, material);\n    point.frustumCulled = false;\n\n    this.scene.children[1].visible = false;\n    this.scene.children[1].add(point);\n  }\n\n  // filter images - update color of images to get inactive (grey) or active images\n  updateProjection=(ar)=>{\n    this.filterAr = ar;\n    let ranges = [];\n    let ar_sliced = [];\n    for (let i = 0; i < this.props.settings.sprite_number; i++) {\n      let start = i * this.sprite_size;\n      let end = (i + 1) * this.sprite_size;\n      if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size;\n      ranges.push([start, end]);\n      ar_sliced.push(ar.slice(start, end));\n    }\n    // \n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\n      let points = this.scene.children[0].children[c];\n      points.geometry.attributes.filteredActive = new THREE.BufferAttribute(\n        ar_sliced[c],\n        1\n      );\n      points.geometry.attributes.filteredActive.needsUpdate = true;\n    }\n    // let point = this.scene.children[0].children[0]\n    // console.log(point.geometry);\n  }\n\n  updatePass2Shader=(num)=>{\n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\n      let points = this.scene.children[0].children[c];\n      if(num===1){\n        points.material.uniforms.greyTransparency.value = 0.1;\n        points.material.uniforms.greyTransparency.needsUpdate = true;\n        points.material.uniforms.imageTransparency.value = 1.0;\n        points.material.uniforms.imageTransparency.needsUpdate = true;\n      }\n      if(num===2){\n        points.material.uniforms.greyTransparency.value = 0.0;\n        points.material.uniforms.greyTransparency.needsUpdate = true;\n        points.material.uniforms.imageTransparency.value = 0.0;\n        points.material.uniforms.imageTransparency.needsUpdate = true;\n      }\n    }\n  }\n\n  updateClusterColors=(clusterSelected)=>{\n    console.log('updateClusterColors',clusterSelected);\n    \n    let numVertices =  this.props.metadata.length;//this.props.settings.sprite_number * this.sprite_size;\n    console.log(\"clusterSelected:\",clusterSelected, \"numVertices Update -->\",numVertices, ' metadata.length:', this.props.metadata.length)\n    let clusters = new Float32Array(numVertices * 3);\n    //let clustersActive = new Float32Array(numVertices );\n    let clusterColors = this.props.settings.clusters.clusterColors;\n    console.log(numVertices,clusterSelected !==\"-\",this.props.settings.total,clusterColors);\n    \n    let ranges = [];\n    // let clustersActiveAr_sliced = [];\n    let clustersAr_sliced = [];\n\n    if( clusterSelected !==\"disabled\" ){\n      let cluster_unique = [];\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 1) {\n          let clusterId = this.props.metadata[index][clusterSelected];\n          // check if clusterId is in cluster_unique\n          if(cluster_unique.indexOf(clusterId) === -1){\n            cluster_unique.push(clusterId);\n          }\n          // get the index of the clusterId in cluster_unique\n          let cluster_int = cluster_unique.indexOf(clusterId);\n          if(cluster_int>=clusterColors.length){\n            // make a random color\n            clusters[index*3] = Math.random();\n            clusters[index*3 + 1] = Math.random();\n            clusters[index*3 + 2] = Math.random();\n          }else{\n            clusters[index*3] = clusterColors[cluster_int][0];\n            clusters[index*3 + 1] = clusterColors[cluster_int][1];\n            clusters[index*3 + 2] = clusterColors[cluster_int][2];\n          }\n          \n      }\n\n      for (let i = 0; i < this.props.settings.sprite_number; i++) {\n        let start = i * this.sprite_size;\n        let end = (i + 1) * this.sprite_size;\n        if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size;\n        ranges.push([start, end]);\n        clustersAr_sliced.push(clusters.slice(start*3, end*3));\n      }\n    }\n    \n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\n      let points = this.scene.children[0].children[c];\n      if( clusterSelected !==\"disabled\" ){\n        points.geometry.attributes.cluster = new THREE.BufferAttribute(\n          clustersAr_sliced[c],\n          3\n        );\n        points.geometry.attributes.cluster.needsUpdate = true;\n        \n        points.material.uniforms.clusterActive.value = 1.0;\n        points.material.uniforms.clusterActive.needsUpdate = true;\n      }else{\n        points.material.uniforms.clusterActive.value = 0.0;\n        points.material.uniforms.clusterActive.needsUpdate = true;\n      }\n    }\n\n\n  }\n\n  highlightPoint(sprite_index, digit_index, full_index) {    \n    let { algorithm_choice, mappings } = this.props;\n\n    let point = this.scene.children[1].children[0];\n\n    // console.log(mappings[algorithm_choice][full_index]);\n    let embedding = mappings[algorithm_choice][full_index];\n\n    let vert = new THREE.Vector3(embedding[0], embedding[1], 0);\n    let vertices = [vert];\n\n    var offsets = new Float32Array(2); // 2 coordinates per point\n\n    let x = ((digit_index % this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / 2048;\n    let y = (Math.floor(digit_index / this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / 2048;\n    offsets[0] = x;\n    offsets[1] = y;\n\n    point.geometry.attributes.position.copyVector3sArray(vertices);\n    point.geometry.attributes.position.needsUpdate = true; // required after the first render\n    point.geometry.attributes.offset.array = offsets;\n    point.geometry.attributes.offset.needsUpdate = true; // required after the first render\n\n    // need to set attributes on geometry and uniforms on material\n    point.material.uniforms.texture.value = this.textures[sprite_index];\n  }\n\n  removeHighlights() {\n    let highlight_container = this.scene.children[1];\n    let highlights = highlight_container.children;\n    highlight_container.remove(...highlights);\n  }\n\n  checkIntersects(mouse_position) {\n    let { width, height, previewPane_ctx, previewPane_image_size } = this.props;\n\n    function mouseToThree([mouseX, mouseY]) {\n      return new THREE.Vector3(\n        (mouseX / width) * 2 - 1,\n        -(mouseY / height) * 2 + 1,\n        1\n      );\n    }\n\n    function sortIntersectsByDistanceToRay(intersects) {\n      return _.sortBy(intersects, 'distanceToRay');\n    }\n\n    let mouse_vector = mouseToThree(mouse_position);\n    this.raycaster.setFromCamera(mouse_vector, this.camera);\n    this.raycaster.params.Points.threshold = 0.25;\n    let intersects = this.raycaster.intersectObjects(\n      this.scene.children[0].children\n    );\n    if (intersects[0]) {\n      let sorted_intersects = sortIntersectsByDistanceToRay(intersects);\n      let intersect = sorted_intersects[0];\n      let sprite_index = intersect.object.userData.sprite_index;\n      let digit_index = intersect.index;\n      let full_index = sprite_index * this.sprite_size + digit_index;\n      // if filter is null then allow selected all, then when filter is defined only allow visible image to be selected\n      if( this.filterAr===undefined || this.filterAr[full_index]<1.0){\n        this.props.setHoverIndex(full_index);\n        // console.log(full_index)\n        this.highlightPoint(sprite_index, digit_index, full_index);\n        this.scene.children[1].visible = true;\n        previewPane_ctx.clearRect(0, 0,  previewPane_image_size, previewPane_image_size);\n        previewPane_ctx.fillRect(0, 0, previewPane_image_size, previewPane_image_size);\n        previewPane_ctx.fillStyle = \"transparent\";\n        try{\n          previewPane_ctx.drawImage(\n            this.datasetIMG[sprite_index],\n            // source rectangle\n            (digit_index % this.props.settings.sprite_side) * this.props.settings.sprite_image_size,\n            Math.floor(digit_index / this.props.settings.sprite_side) * this.props.settings.sprite_image_size,\n            this.props.settings.sprite_image_size,\n            this.props.settings.sprite_image_size,\n            // destination rectangle\n            0,\n            0,\n            previewPane_image_size,\n            previewPane_image_size\n          );\n        }catch (error){\n          console.log(\"previewPane_ctx.drawImage\",error);\n        }\n      }\n    } else {\n      this.props.setHoverIndex(null);\n      this.scene.children[1].visible = false;\n      previewPane_ctx.fillRect(0, 0, previewPane_image_size, previewPane_image_size);\n      previewPane_ctx.fillStyle = \"transparent\";\n    }\n  }\n\n  handleMouse() {\n    let view = d3.select(this.renderer.domElement);\n    this.raycaster = new THREE.Raycaster();\n\n    view.on('mousemove', () => {\n      let [mouseX, mouseY] = d3.mouse(view.node());\n      let mouse_position = [mouseX, mouseY];\n      this.checkIntersects(mouse_position);\n    })\n    \n    view.on('dblclick', () => {\n      if(this.scene.children[1].visible) this.props.clickOnImage();\n    })\n  }\n\n  init() {\n    let { width, height } = this.props;\n    this.scene = new THREE.Scene();\n    let vFOV = 75;\n    let aspect = width / height;\n    let near = 0.01;\n    let far = 1000;\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far);\n\n    this.renderer = new THREE.WebGLRenderer({ preserveDrawingBuffer: true,alpha: true });\n    this.renderer.setClearColor(0xffffff, 0);\n    this.renderer.autoClear = false;\n    this.renderer.setSize(width, height);\n    this.renderer.domElement.id = \"threeCanvas\";\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.addPoints();\n    this.addBlankHighlightPoints();\n    this.setupCamera();\n    this.animate();\n    this.handleMouse();\n    this.changeEmbeddings(this.props.algorithm_choice);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate);\n    TWEEN.update();\n    this.renderer.clear()\n    // 1-Pass :: Render filtered images (grey semi-transparent images that create a shadow behind)\n    if(parseInt(this.props.greyRenderTypeSelected)===0){\n      this.updatePass2Shader(1)\n      this.renderer.render(this.scene, this.camera);\n    }\n    // 2-Pass - Render all images\n    this.updatePass2Shader(2)\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentDidUpdate(prevProps) {\n    let { width, height } = this.props;\n    if (width !== prevProps.width || height !== prevProps.height) {\n      this.handleResize(width, height);\n    }\n    \n    if (prevProps.algorithm_choice !== this.props.algorithm_choice) {\n      this.changeEmbeddings(\n        //prevProps.algorithm_choice,\n        this.props.algorithm_choice,\n      );\n    }\n    \n    if (this.props.scaleMin !== prevProps.scaleMin || this.props.scaleMax !== prevProps.scaleMax){\n      this.handleResize(width, height);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    let { width, height } = this.props;\n    const tileProgress = this.state.tilesLoaded;\n    const allTiles = this.props.settings.sprite_number;\n    return (\n      <><div>\n        {tileProgress < 1 ? <div className=\"loading\"><CircularProgress color=\"inherit\"/><div>loading tiles...</div></div> : \n        tileProgress < allTiles-1 ? <div className=\"loading-small\"><CircularProgress color=\"inherit\"/><div>loading...</div></div> : \n        ''\n      }\n      </div><div\n          style={{ width: width, height: height, overflow: 'hidden' }}\n          ref={mount => {\n            this.mount = mount\n          } } /></>\n    ) \n  }\n}\n\nexport default React.memo(Projection)\n\n\n","import React, { Component } from 'react'\nimport PreviewPane from './PreviewPane'\nimport SliderPane from './SliderPane'\nimport FilterPane from './FilterPane'\nimport InfoPane from './InfoPane'\nimport ViewPane from './ViewPane'\nimport MappingsPane from './MappingsPane'\nimport Export from './Export'\nimport { ProSidebar, Menu, MenuItem, SubMenu } from 'react-pro-sidebar';\nimport './scss/Menu.scss';\nimport Projection from './Projection'\nimport * as _ from 'lodash'\nimport { CircularProgress } from \"@material-ui/core\";\nimport { FaDatabase, FaSlidersH, FaSearch, FaCloudDownloadAlt, FaAngleDoubleLeft, FaAngleDoubleRight, FaRegImage, FaInfo, FaQuestion, FaEye } from \"react-icons/fa\";\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    let total = this.props.settings[\"total\"]\n    this.state = {\n      ww: null,\n      wh: null,\n      hover_index: 0,\n      previewPane_height: null,\n      controlPane_height: null,\n      filterPane_height: null,\n      algorithm_choice: null,\n      allFilter: {},\n      currentProjection: new Float32Array(total).fill(0),\n      currentFilter: new Float32Array(total).fill(0),\n      currentSearch: new Float32Array(total).fill(0),\n      scaleMin: 14,\n      scaleMax: 70,\n      filterGrey: true,\n      clusterTypeSelected:'cluster', //'-' => when disable in start\n      greyRenderTypeSelected:0,\n      dimensions: {},\n      collapsedControl: false,\n      collapsedObject: false,\n      showAdvancedFilters: false\n    }\n    this.previewPane_ctx = null;\n    this.setSize = _.debounce(this.setSize.bind(this), 200);\n    this.setPreviewPaneCanvas = this.setPreviewPaneCanvas.bind(this);\n    this.setPreviewImage = this.setPreviewImage.bind(this);\n    this.selectAlgorithm = this.selectAlgorithm.bind(this);\n    this.selectDataset = this.selectDataset.bind(this);\n    this.selectFilterData = this.selectFilterData.bind(this);// add it\n    this.toggleControl = this.toggleControl.bind(this);\n    this.refProjection = React.createRef();\n    this.mappingsPaneRef = React.createRef(); \n  }\n\n  componentDidMount() {\n    this.setDefaults();\n    this.selectAlgorithm(this.props.algorithm_name);\n    this.setSize();\n    setTimeout(() => {\n      let value = 'cluster';\n      this.setState({ clusterTypeSelected: parseInt(value)})\n      try{\n        this.refProjection.current.updateClusterColors(value)\n      } catch(error) {console.log(\"error updateClusterColors\")}\n    }, 2000);\n    window.addEventListener('resize', this.setSize);\n  }\n\n  setDefaults(){\n    if (this.props.settings[\"total\"] < 20000) {\n      this.setState( { scaleMin: 15, filterGrey: true, greyRenderTypeSelected: 0 } )\n    } else {\n      this.setState( { scaleMin: 5, filterGrey: false, greyRenderTypeSelected: 1 } )\n    }\n  }\n\n  setRenderer(renderer){\n    this.setState( { renderer: renderer});\n  }\n\n  handleChangeScale(e,val) {\n    this.setState({ scaleMin: val})\n  }\n\n  handleChangeZoom(e,val) {\n    this.setState({ scaleMax: val})\n  }\n\n  handleChangeCluster(e) {\n    let value = e.target.value;\n    this.setState({ clusterTypeSelected: parseInt(value)})\n    console.log(e.target)\n    try{\n      this.refProjection.current.updateClusterColors(value)\n    } catch(error) {console.log(\"error updateClusterColors\")}\n  }\n\n  handleChangeGrey(value) {\n    this.setState({ greyRenderTypeSelected: value})\n  }\n\n  calculateProjection=(newArr,type, update)=>{\n    let A, B, arr;\n    if(type===\"filter\"){\n      this.setState({currentFilter: newArr})\n      A = newArr;\n      B = this.state.currentSearch;\n    }\n    if(type===\"search\"){\n      this.setState({currentSearch: newArr});\n      A = this.state.currentFilter;\n      B = newArr;\n    }\n    if(update){\n      arr = A.map((x, idx) => x + B[idx]);\n      this.setState({currentProjection: arr});\n    } else {\n      arr = newArr;\n    }\n    try{\n      this.refProjection.current.updateProjection(arr);\n    } catch(error) {}\n  }\n\n  selectAlgorithm(v) {\n    let i = this.props.algorithm_options.indexOf(v);\n    if(i<0) i = 0;\n    this.setState({ algorithm_choice: i });\n    // Save algorithm in URL parameters\n    this.props.addToUrl('projection',this.props.algorithm_options[i]);\n  }\n\n  selectDataset(p) {\n    this.props.changeDataset(p);\n  }\n\n  selectFilterData(p,type) {\n    let d;// dataset\n    let t;// task\n    if(type===\"dataset\"){\n      d =  p;\n      t =  this.mappingsPaneRef.current.getFilterTask();\n    }\n    \n    if(type===\"task\"){\n      t =  p;\n      d =  this.mappingsPaneRef.current.getFilterDataset();\n    }\n    \n    console.log(t)\n    // All types not filter when 0 is not filtered\n    if(d['Artist'] && d['Laypeople'] && d['GPT-4o'] && d['Input image'] && t['Copying'] && t['Creative']){\n      var arr = new Float32Array(this.props.settings[\"total\"]).fill(0);\n    // Any of the options to filter\n    }else{\n      var arr = new Float32Array(this.props.settings[\"total\"]).fill(1);\n      this.props.metadata.forEach(element => {\n        if( ((element['Type']==='Artist' && d['Artist'])  \n          || (element['Type']==='Laypeople' && d['Laypeople'])  \n          || (element['Type']==='GPT-4o' && d['GPT-4o']) \n          || (element['Type']==='Input image' && d['Input image']) )\n          && (\n          (element['trial_number'].includes(\"Faithful\") && t['Copying'])\n          || \n          (element['trial_number'].includes(\"Aesthetics\") && t['Creative'])\n          )\n          ){\n          arr[element[\"index\"]] = 0;\n        }\n      });\n    }\n  \n    this.calculateProjection(arr, \"search\", true);\n  }\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight });\n    let previewPane_height = this.previewPane_mount.offsetHeight;\n    this.setState({ previewPane_height: previewPane_height });\n    if (this.previewPane_ctx) this.previewPane_ctx.imageSmoothingEnabled = false;\n    if ( window.innerWidth < 900) {\n      this.setState({ collapsedControl: true, collapsedObject: true })\n    } else {\n      this.setState({ collapsedControl: false, collapsedObject: false })\n\n    }\n  }\n\n  setPreviewPaneCanvas(canvas) {\n    let ctx = canvas.getContext('2d');\n    ctx.imageSmoothingEnabled = false;\n    this.previewPane_ctx = ctx;\n    console.log(ctx);\n  }\n\n  setPreviewImage() {\n      return (\n      <img\n      src={ this.props.settings.url_prefix + this.props.metadata[this.state.hover_index].filename }\n      alt=\"preview\"\n      style={{\n        verticalAlign: \"middle\",\n      }}\n      />)\n  }\n\n\n  setHoverIndex(hover_index) {\n    if (hover_index != null){\n      this.setState({ hover_index: hover_index });\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize);\n  }\n\n  clickOnImage(){\n    console.log(\"open image\",this.state.hover_index);\n    try{\n      let url = this.props.metadata[this.state.hover_index].link_URL\n      window.open(url, '_blank', 'noopener,noreferrer');\n    }catch(err){}\n  }\n\n  toggleControl = () => {\n    this.setState({ collapsedControl: !this.state.collapsedControl \n  })}\n  \n  toggleObject = () => {\n    this.setState({ collapsedObject: !this.state.collapsedObject \n  })}\n\n\n  render() {\n    let {\n      embeddings_data,\n      mappings,\n      algorithm_options,\n      dataset_options,\n      metadata,\n      settings,\n      barData\n    } = this.props;\n\n    let {\n      ww,\n      wh,\n      hover_index,\n      algorithm_choice,\n      currentProjection,\n      allFilter,\n      greyRenderTypeSelected,\n      clusterTypeSelected,\n      collapsedControl,\n      collapsedObject,\n      showAdvancedFilters\n    } = this.state;\n\n    let previewPane_ctx = this.previewPane_ctx;\n    \n    let line_height = 1.5;\n\n    let previewPane_style = {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      // width: 320,\n      height: 'auto',\n      maxHeight: '100vh',\n      overflow: 'auto',\n      background: '#222',\n      zIndex: 8\n    };\n    let controlMenu_style = {\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      // width: 300,\n      // left:ww-350,\n      height: 'auto',\n      maxHeight: '100vh',\n      overflow: 'auto',\n      background: '#222',\n      zIndex: 8\n    };\n\n    let main_style = {\n      position: 'relative',\n      background: '#111',\n      overflow: 'hidden',\n      width: ww, \n      height: wh\n    };\n\n    let previewPane_image_size = '320px';\n    let font_size = 16;\n\n    let grem = font_size * line_height;\n\n    let general_style = {\n      fontSize: font_size,\n      lineHeight: line_height,\n    };\n\n    let displayNumb = 0;\n    for(let i=0;i<settings.total;i++){\n      if(currentProjection[i]===0){\n        displayNumb++;\n      }\n    }\n\n\n    return ww !== null ? (\n      <div style={general_style}>\n        <div\n          style={controlMenu_style}\n          ref={controlMenu_mount => {\n            this.controlMenu_mount = controlMenu_mount\n          }}\n        >\n          <div>\n          <ProSidebar collapsed={collapsedControl}>\n            <Menu iconShape='square'>\n            <MenuItem>\n            <h3></h3>\n            <a className=\"collapseCon\" onClick={this.toggleControl}>{collapsedControl ? < FaAngleDoubleLeft />  : < FaAngleDoubleRight /> }</a>\n            </MenuItem>\n\n              <SubMenu defaultOpen\n              title={collapsedControl ? null : \"Data & Projections\"}  \n              icon={collapsedControl ? < FaDatabase />  : null }\n              >\n              <MenuItem>\n              <MappingsPane\n                ref={this.mappingsPaneRef}\n                grem={grem}\n                algorithm_options={algorithm_options}\n                algorithm_choice={algorithm_choice}\n                selectAlgorithm={this.selectAlgorithm}\n                dataset_options={dataset_options}\n                selectDataset={this.selectDataset}\n                selectedDataset={this.props.selectedDataset}\n                selectFilterData={this.selectFilterData}\n                datasetInfo={settings[\"datasetInfo\"]}\n              />\n              </MenuItem>\n              </SubMenu>\n              <SubMenu defaultOpen\n              title={collapsedControl ? null : \"Dimension Filters\"}  \n              icon={collapsedControl ? <FaSlidersH />  : null }\n              >\n\n\n                <MenuItem>\n                <SliderPane\n                grem={grem}\n                metadata={metadata}\n                hover_index={hover_index}\n                settings={settings}\n                barData={barData}\n                calculateProjection={this.calculateProjection}\n                currentProjection={currentProjection}\n                allFilter={allFilter}\n                />\n                </MenuItem>\n                </SubMenu>\n\n                \n              <SubMenu defaultOpen\n                title={collapsedObject ? null : \"Object Appearance\"}  \n                icon={collapsedObject ? <FaEye />  : null }\n                > \n                <MenuItem>\n                <ViewPane\n                  clusters={settings.clusters}\n                  scaleMin={this.state.scaleMin}\n                  scaleMax={this.state.scaleMax}\n                  filterGrey={this.state.filterGrey}\n                  handleChangeScale = {this.handleChangeScale.bind(this)}\n                  handleChangeZoom = {this.handleChangeZoom.bind(this)}\n                  handleChangeCluster = {this.handleChangeCluster.bind(this)}\n                  handleChangeGrey = {this.handleChangeGrey.bind(this)}\n                  total = {settings.total}\n                />\n                </MenuItem>\n                <MenuItem>\n                <div className='info'>showing {displayNumb} / {settings.total}</div>\n              </MenuItem>\n              </SubMenu>\n              {showAdvancedFilters && (\n              <SubMenu\n                title={collapsedControl ? null : \"Advanced Filters\"}  \n                icon={collapsedControl ? < FaSearch />  : null }\n                >\n\n                <MenuItem>\n                  <FilterPane\n                    grem={grem}\n                    calculateProjection={this.calculateProjection}\n                    hover_index={hover_index}\n                    settings={settings}\n                    metadata={metadata}\n                    currentProjection={currentProjection}\n                    allFilter={allFilter}\n                  />\n                </MenuItem>\n              </SubMenu>\n              )}\n              <SubMenu\n                title={collapsedControl ? null : \"Export Filtered Data\"}  \n                icon={collapsedControl ? <FaCloudDownloadAlt />  : null }\n                >\n\n              <MenuItem>\n                <Export\n                metadata = {metadata}\n                currentProjection = {currentProjection}\n                />\n              </MenuItem>\n            </SubMenu>\n            </Menu>\n          </ProSidebar>\n          </div>\n        </div>    \n\n        <div\n          style={previewPane_style}\n          ref={previewPane_mount => {\n            this.previewPane_mount = previewPane_mount\n          }}\n        >\n\n        <div>\n          <ProSidebar collapsed={collapsedObject}>\n            <Menu iconShape='square'>   \n            <MenuItem >\n            {collapsedObject ? <h3></h3> : (\n            <span >\n            Dashboard\n            <br />\n            <div className='about-paper'>\n            <h3>Expertise elevates AI usage: experimental evidence comparing laypeople and professional artists</h3>\n            \n            <a href=\"http://arxiv.org/abs/2501.12374\" target=\"_blank\" rel=\"noopener noreferrer\">\n            http://arxiv.org/abs/2501.12374\n            </a>\n            </div>\n            </span>\n            ) }\n            <a className='collapseObj' onClick={this.toggleObject}>{collapsedObject ? < FaAngleDoubleRight />  : < FaAngleDoubleLeft /> }</a>\n            </MenuItem>\n              <SubMenu defaultOpen\n                title={collapsedObject ? null : \"Object Preview\"}  \n                icon={collapsedObject ? <FaRegImage />  : null }\n                >  \n                <PreviewPane\n                  previewPane_image_size={previewPane_image_size}\n                  setPreviewPaneCanvas={this.setPreviewPaneCanvas}\n                  setPreviewImage={this.setPreviewImage}\n                  hover_index={hover_index}\n                />\n              </SubMenu>\n              <SubMenu defaultOpen\n                title={collapsedObject ? null : \"Object Info\"}  \n                icon={collapsedObject ? <FaInfo />  : null }\n                >  \n                <MenuItem>\n                <InfoPane\n                  hover_index={hover_index}\n                  metadata={metadata}\n                  infos={settings.info}\n                />\n                </MenuItem>\n              </SubMenu>\n\n              \n            <SubMenu\n              title={collapsedObject ? null : 'About Collection Space Navigator'}  \n              icon={collapsedObject ? <FaQuestion />  : null }\n              >         \n              <div className='about'>\n                <a href=\"https://github.com/Collection-Space-Navigator/CSN\" target=\"_blank\" rel=\"noreferrer\" ><strong>[GitHub page of the tool...]</strong></a><br/>\n                The Collection Space Navigator (CSN) is an <strong>interactive visualization interface for multidimensional datasets</strong>.\n                It functions as an explorative visualization tool for researching collections and their multidimensional representations. \n                We designed this tool to better understand multidimensional data, its methods, and semantic qualities through spatial navigation and filtering. \n                CSN can be used with any image collection and can be customized for specific research needs. \n              </div>\n              </SubMenu>\n            </Menu>\n          </ProSidebar>\n          </div>\n        </div>\n        <div style={main_style}>\n          <Projection\n            ref={this.refProjection}\n            width={main_style.width}\n            height={main_style.height}\n            embeddings_data={embeddings_data}\n            mappings={mappings}\n            metadata={metadata}\n            previewPane_ctx={previewPane_ctx}\n            previewPane_image_size={previewPane_image_size}\n            setHoverIndex={this.setHoverIndex.bind(this)}\n            algorithm_choice={algorithm_choice}\n            datasetDir={this.props.datasetDir}\n            clusterTypeSelected={clusterTypeSelected}\n            greyRenderTypeSelected={greyRenderTypeSelected}\n            settings={settings}\n            initPath={this.props.initPath}\n            scaleMin={this.state.scaleMin}\n            scaleMax={this.state.scaleMax}\n            currentProjection={currentProjection}\n            clickOnImage={this.clickOnImage.bind(this)}\n            // tiles={this.tiles}\n          />\n        </div>\n      </div>\n      \n    ) : (\n      <div className=\"loading\"><CircularProgress color=\"inherit\"/><div>loading layout...</div></div>\n    )\n  }\n}\n\nexport default Layout\n\n\n\n","import React, { Component } from 'react'\nimport {useParams, useNavigate} from \"react-router-dom\";\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport color from 'color'\n// import * as THREE from 'three'\nimport { CircularProgress } from \"@material-ui/core\";\n\n\nfunction withRouter(Component) {\n  return props => <Component {...props} params={useParams()} navigate={useNavigate()} />;\n}\n\nclass Data extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // tilesLoaded: 0,\n      algorithm_options: null,\n      dataset_options: null,\n      dataset_dirs: null,\n      embeddings_data: null,\n      mappings: null,\n      metadata:null,\n      defaultDataset:null,\n      algorithm_name:0\n    };\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]));\n    let ys = embeddings.map(e => Math.abs(e[1]));\n    let max_x = _.max(xs);\n    let max_y = _.max(ys);\n    let max = Math.max(max_x, max_y);\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20]);\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])]);\n    return scaled_embeddings;\n  }\n  \n  componentDidMount() {\n    // Get parameters from URL and save to settings\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    this.setState({ selectedDataset: urlParams.get('dataset')});\n    if(urlParams.get('projection')!==undefined) this.setState({algorithm_name:urlParams.get('projection')});\n    // Load embeddings\n    this.loadInit('datasets/datasets_config.json')\n  }\n\n  loadConfig(path){\n    this.loadSettings(`datasets/${path}/config.json`);\n    this.loadBarData(`datasets/${path}/barData.json`);\n    this.loadMetadata(`datasets/${path}/metadata.json`);\n  }\n  \n  prepareMappings(ID){\n    let algorithm_options = [];\n    for (let i in this.state.settings.embeddings) {\n      console.log(this.state.settings.embeddings[i].name);\n      algorithm_options[i] = this.state.settings.embeddings[i].name;\n    }\n    this.setState({ algorithm_options: algorithm_options });\n  }\n\n  loadDataset(ID){\n    let mappings = [];\n    const embeddings = this.state.settings.embeddings;\n    for (let i in embeddings) {\n      // console.log(embeddings[i].key);\n      fetch(`${process.env.PUBLIC_URL}/datasets/${this.state.datasetDir}/${embeddings[i].file}`)\n        .then(response => response.json())\n        .then(embeddings_data => {\n          let scaled_embeddings = embeddings_data;\n          // this.scaleEmbeddings(embeddings_data);\n          mappings[i] = scaled_embeddings;\n        }\n        )\n        .then(() => {\n          this.setState({ mappings: mappings, embeddings_data: mappings[0] })\n        })\n  }\n}\n\n  addToUrl(paramName,value){\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    urlParams.set(paramName, value);\n    this.props.navigate(\"?\"+urlParams.toString());\n  }\n\n  prepareDatasets(ID){\n    let dataset_options = [];\n    let dataset_dirs = [];\n    for (let i in this.state.settings.embeddings) {\n      console.log(this.state.settings.embeddings[i].name);\n      dataset_options[i] = this.state.settings.embeddings[i].name;\n      dataset_dirs[i] = this.state.settings.embeddings[i].directory;\n    }\n    this.setState({ dataset_options: dataset_options, dataset_dirs: dataset_dirs });\n  }\n\n  changeDataset(choice){\n    this.addToUrl('dataset',choice);\n    let k = this.state.dataset_options.indexOf(choice);\n    let newDataset = this.state.dataset_dirs[k]\n    this.setState({ \n      selectedDataset: choice, \n      datasetDir: newDataset,\n      algorithm_options: null,\n      embeddings_data: null,\n      mappings: null,\n      metadata: null\n    });\n    this.loadConfig(newDataset);\n  }\n\n  loadInit(file){\n    fetch(`${process.env.PUBLIC_URL}/`+file)\n      .then(response => response.json())\n      .then(init =>{\n        let dataset_options = [];\n        let dataset_dirs = [];\n        for (let i in init.data) {\n          console.log(init.data[i].directory);\n          dataset_options[i] = init.data[i].name;\n          dataset_dirs[i] = init.data[i].directory;\n        }\n        this.setState({ dataset_options: dataset_options,dataset_dirs: dataset_dirs});\n        // Select dataset folder from defined in URL parameters\n        if(this.state.selectedDataset===null){\n          this.setState({ selectedDataset: init.data[init.default].name,  datasetDir: init.data[init.default].directory});\n          this.addToUrl('dataset',init.data[init.default].name);\n        }else{\n          let foundInitDataset = false;\n          for (let i in init.data) {\n            if(init.data[i].name===this.state.selectedDataset){\n              this.setState({datasetDir: init.data[i].directory});\n              foundInitDataset = true;\n            } \n          }\n          if(!foundInitDataset) this.setState({ selectedDataset: init.data[init.default].name,  datasetDir: init.data[init.default].directory});\n        }\n      }\n      )\n      .then(()=> \n      this.loadConfig(this.state.datasetDir))\n\n  }\n\n  loadSettings(file){\n    fetch(`${process.env.PUBLIC_URL}/`+file)\n      .then(response => response.json())\n      .then(settings =>{\n        // Convert colors from rgb(255,0,0) to array [1.0,0.0,0.0]\n        try{\n          const floatColorConvertedArr = settings.clusters.clusterColors.map(myColorFunction);\n          function myColorFunction(value) {\n            return [color(value).rgb().array()[0]/255,color(value).rgb().array()[1]/255,color(value).rgb().array()[2]/255];\n          }\n          settings.clusters.clusterColors = floatColorConvertedArr;\n        }catch(error){}\n        // Save settings to \n        this.setState({\n          settings: settings\n        });\n      }\n      )\n      .then(() =>\n      this.prepareMappings(0))\n      .then(()=> \n      this.loadDataset(0))\n      // .then(()=> \n      // this.loadTiles())\n  }\n\n  loadMetadata(file){\n    fetch(`${process.env.PUBLIC_URL}/`+file)\n      .then(response => response.json())\n      .then(metadata =>\n        this.setState({\n          metadata: metadata,\n        })\n      )\n  }\n\n  loadBarData(file){\n    fetch(`${process.env.PUBLIC_URL}/`+file)\n      .then(response => response.json())\n      .then(barData =>\n        this.setState({\n          barData: barData,\n        })\n      )\n  }\n\n\n  render() {\n    return this.state.embeddings_data && this.state.metadata ? (\n\n      <Layout\n        {...this.state}\n        addToUrl={this.addToUrl.bind(this)}\n        algorithm_name={this.state.algorithm_name}\n        algorithm_options={this.state.algorithm_options}\n        dataset_options={this.state.dataset_options}\n        dataset_dirs={this.state.dataset_dirs}\n        changeDataset={this.changeDataset.bind(this)}\n        selectedDataset={this.state.selectedDataset}\n        datasetDir={this.state.datasetDir}\n        // tiles={this.tiles}\n      />\n\n    ) : (\n      <div className=\"loading\" ><CircularProgress color=\"inherit\"/><div>loading datasets... </div></div>\n      \n    )\n  }\n}\n\nexport default withRouter(Data)\n\n","import React from \"react\";\nimport {\n  BrowserRouter, Routes, Route\n} from \"react-router-dom\";\n\n// Area components\nimport './App.css'\nimport WithRouter from './Data'\n\nexport default function App() {\n  \n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route exact path=\"/\" element={<WithRouter/>} />\n        <Route exact path=\"/CSN\" element={<WithRouter/>}/> \n      </Routes>\n    </BrowserRouter>\n  );\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}